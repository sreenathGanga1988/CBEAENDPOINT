// <auto-generated />
using System;
using DataAccess.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.EFCore.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200927121001_gettback")]
    partial class gettback
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.AccountConculsion", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CircleId")
                        .HasColumnName("CircleID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("CreditedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MonthCode")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfActualRecords")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfDuplicatedRecords")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfMultipleRecords")
                        .HasColumnType("int");

                    b.Property<int>("NoOfRecords")
                        .HasColumnType("int");

                    b.Property<int>("YearOf")
                        .HasColumnName("YearOF")
                        .HasColumnType("int");

                    b.ToTable("AccountConculsion");
                });

            modelBuilder.Entity("Domain.Entities.AccountDuplication", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CircleId")
                        .HasColumnName("CircleID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DuplicatedCircleId")
                        .HasColumnName("DuplicatedCircleID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MonthCode")
                        .HasColumnType("int");

                    b.Property<int>("StaffNo")
                        .HasColumnType("int");

                    b.Property<int>("YearOf")
                        .HasColumnName("YearOF")
                        .HasColumnType("int");

                    b.ToTable("AccountDuplication");
                });

            modelBuilder.Entity("Domain.Entities.AccountMultiEntry", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CircleId")
                        .HasColumnName("CircleID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MonthCode")
                        .HasColumnType("int");

                    b.Property<int>("StaffNo")
                        .HasColumnType("int");

                    b.Property<int>("YearOf")
                        .HasColumnName("YearOF")
                        .HasColumnType("int");

                    b.ToTable("AccountMultiEntry");
                });

            modelBuilder.Entity("Domain.Entities.Accounts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("CircleId")
                        .HasColumnName("CircleID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DpCode")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MonthCode")
                        .HasColumnType("int");

                    b.Property<int>("StaffNo")
                        .HasColumnType("int");

                    b.Property<int>("TransMode")
                        .HasColumnType("int");

                    b.Property<int>("YearOf")
                        .HasColumnName("YearOF")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CircleId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DpCode");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StaffNo");

                    b.HasIndex("TransMode");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.AccountsDirectEntry", b =>
                {
                    b.Property<double?>("Amt")
                        .HasColumnType("float");

                    b.Property<string>("DdIba")
                        .HasColumnName("DD_IBA ")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DdIbaDate")
                        .HasColumnName("DD_IBA Date")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("DpCode")
                        .HasColumnType("float");

                    b.Property<string>("Enrl")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("F10")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("F11")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("F9")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Fine")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("StaffNo")
                        .HasColumnType("float");

                    b.ToTable("AccountsDirectEntry");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Property<int>("DpCode")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Address3")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("CircleId")
                        .HasColumnName("CircleID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("StateId")
                        .HasColumnName("StateID")
                        .HasColumnType("int");

                    b.HasKey("DpCode");

                    b.HasIndex("CircleId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StateId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Entities.CheckOffArrear", b =>
                {
                    b.Property<int>("CircleId")
                        .HasColumnName("CircleID")
                        .HasColumnType("int");

                    b.Property<int>("YearOf")
                        .HasColumnName("YearOF")
                        .HasColumnType("int");

                    b.Property<int>("MonthCode")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("CircleId", "YearOf", "MonthCode")
                        .HasName("PK_CheckOffArrear_1");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("CheckOffArrear");
                });

            modelBuilder.Entity("Domain.Entities.Circle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<int?>("CircleCode")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("StateId")
                        .HasColumnName("StateID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StateId");

                    b.ToTable("Circle");
                });

            modelBuilder.Entity("Domain.Entities.CircleState", b =>
                {
                    b.Property<int>("CircleId")
                        .HasColumnName("CircleID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StateId")
                        .HasColumnName("StateID")
                        .HasColumnType("int");

                    b.HasIndex("CircleId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StateId");

                    b.ToTable("CircleState");
                });

            modelBuilder.Entity("Domain.Entities.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<byte[]>("Image1")
                        .IsRequired()
                        .HasColumnName("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ModifiedByuserId")
                        .HasColumnName("ModifiedByuserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByuserId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<int>("StaffNo")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DesignationId")
                        .HasColumnName("DesignationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Doj")
                        .HasColumnName("DOJ")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DojtoScheme")
                        .HasColumnName("DOJToScheme")
                        .HasColumnType("datetime");

                    b.Property<int?>("DpCode")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnName("GenderID")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImageId")
                        .HasColumnName("ImageID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRegCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("StatusId")
                        .HasColumnName("StatusID")
                        .HasColumnType("int");

                    b.HasKey("StaffNo");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("DpCode");

                    b.HasIndex("ImageId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Domain.Entities.Month", b =>
                {
                    b.Property<string>("Abbrivation")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("MonthCode")
                        .HasColumnType("int");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.ToTable("Month");
                });

            modelBuilder.Entity("Domain.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationClock")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("CultureObject")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("LineNumberFormat")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Domain.Entities.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DpCode")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StaffNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DpCode");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StaffNo");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnName("ModifiedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UserTypeId")
                        .HasColumnName("UserTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidTill")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entities.UserPreferences", b =>
                {
                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Domain.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("UserType")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("Domain.Entities.Accounts", b =>
                {
                    b.HasOne("Domain.Entities.Circle", "Circle")
                        .WithMany("Accounts")
                        .HasForeignKey("CircleId")
                        .HasConstraintName("FK_Accounts_Circle")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("AccountsCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Accounts_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Branch", "DpCodeNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("DpCode")
                        .HasConstraintName("FK_Accounts_Branch");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("AccountsModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Accounts_User1")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "StaffNoNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("StaffNo")
                        .HasConstraintName("FK_Accounts_Member")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Status", "TransModeNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("TransMode")
                        .HasConstraintName("FK_Accounts_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.HasOne("Domain.Entities.Circle", "Circle")
                        .WithMany("Branch")
                        .HasForeignKey("CircleId")
                        .HasConstraintName("FK_Branch_Circle")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("BranchCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Branch_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("BranchModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Branch_User1")
                        .IsRequired();

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("Branch")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Branch_State");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("CategoryCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Category_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("CategoryModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Category_User1")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CheckOffArrear", b =>
                {
                    b.HasOne("Domain.Entities.Circle", "Circle")
                        .WithMany("CheckOffArrear")
                        .HasForeignKey("CircleId")
                        .HasConstraintName("FK_CheckOffArrear_Circle")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("CheckOffArrearCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_CheckOffArrear_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("CheckOffArrearModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_CheckOffArrear_User1")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Circle", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("CircleCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Circle_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("CircleModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Circle_User1")
                        .IsRequired();

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("Circle")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Circle_State");
                });

            modelBuilder.Entity("Domain.Entities.CircleState", b =>
                {
                    b.HasOne("Domain.Entities.Circle", "Circle")
                        .WithMany()
                        .HasForeignKey("CircleId")
                        .HasConstraintName("FK_CircleState_Circle")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_CircleState_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_CircleState_User1")
                        .IsRequired();

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_CircleState_State")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Designation", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("DesignationCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Designation_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("DesignationModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Designation_User1")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("ImageCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Image_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByuser")
                        .WithMany("ImageModifiedByuser")
                        .HasForeignKey("ModifiedByuserId")
                        .HasConstraintName("FK_Image_User1")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Member")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Member_Category");

                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("MemberCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Member_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Designation", "Designation")
                        .WithMany("Member")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_Member_Designation");

                    b.HasOne("Domain.Entities.Branch", "DpCodeNavigation")
                        .WithMany("Member")
                        .HasForeignKey("DpCode")
                        .HasConstraintName("FK_Member_Branch");

                    b.HasOne("Domain.Entities.Image", "Image")
                        .WithMany("Member")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Member_Image");

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("MemberModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Member_User1")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Status", "Status")
                        .WithMany("Member")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Member_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Settings", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("SettingsCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Settings_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("SettingsModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Settings_User1")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("SettingsUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Settings_User2");
                });

            modelBuilder.Entity("Domain.Entities.Status", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("StatusCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Status_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("StatusModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Status_User1")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Transfer", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedByUser")
                        .WithMany("TransferCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Transfer_User")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Branch", "DpCodeNavigation")
                        .WithMany("Transfer")
                        .HasForeignKey("DpCode")
                        .HasConstraintName("FK_Transfer_Branch")
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "ModifiedByUser")
                        .WithMany("TransferModifiedByUser")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("FK_Transfer_User1")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "StaffNoNavigation")
                        .WithMany("Transfer")
                        .HasForeignKey("StaffNo")
                        .HasConstraintName("FK_Transfer_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.UserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserPreferences_User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

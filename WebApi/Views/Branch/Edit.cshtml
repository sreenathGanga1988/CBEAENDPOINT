@model DTO.BranchDTO

@{
    ViewData["Title"] = "Edit";
}

<h2 class="form-heading">Edit Branch</h2>

<hr />

<form asp-action="Edit">
    <partial name="/Views/Shared/_ErrorBox.cshtml" />

    <input type="hidden" asp-for="CreatedDate" />
    <input type="hidden" asp-for="CreatedByUserId" />



    <div class="row justify-content-center">


        <div class="form-group col-4">
            <label id="lbl_Id" class="control-label">Id</label>
        </div>
        <div class=" col-4">
            <input id="Id"name="Id" v-model="dataModel.id" class="form-control" type="number" required readonly />
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="form-group col-4">
            <label for="DpCode" id="lbl_DpCode" class="control-label">DPCode</label>
        </div>
        <div class=" col-4">
            <input id="DpCode" name="DpCode" v-model="dataModel.dpCode" type="text" class="form-control" required />
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="form-group col-4">
            <label for="Name" id="lbl_Name" class="control-label">Branch Name</label>
        </div>
        <div class=" col-4">
            <input id="Name" name="Name" v-model="dataModel.name" type="text" maxlength="150" required class="form-control" />
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="form-group col-4">
            <label for="CircleId" id="lbl_CircleId" class="control-label">Circle </label>
        </div>
        <div class=" col-4">
            <input id="CircleId" name="CircleId" v-model="dataModel.circleId" type="hidden" />
            @*<v-select :options="circles" :reduce="circle => circle.code" v-model="dataModel.circleId"></v-select>*@
            <v-select :options="circles" :reduce="circle => circle.code" label="label"  @@search="onCircleSearch" v-model="dataModel.circleId"></v-select>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="form-group col-4">
            <label for="StateId" id="lbl_StateId" class="control-label">State </label>
        </div>
        <div class=" col-4">
            <input id="StateId" name="StateId" v-model="dataModel.stateId" type="hidden" />
            @*<v-select :options="states" :reduce="state => state.code" v-model="dataModel.stateId"></v-select>*@
            <v-select :options="states" :reduce="state => state.code" label="label"  @@search="onStateSearch" v-model="dataModel.stateId"></v-select>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="form-group col-4">
            <label for="Address1" id="lbl_Address1" class="control-label">Address1</label>
        </div>
        <div class=" col-4">
            <input id="Address1" name="Address1" v-model="dataModel.address1" maxlength="250" type="text" required class="form-control" />
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="form-group col-4">
            <label for="Address2" id="lbl_Address2" class="control-label">Address2</label>
        </div>
        <div class=" col-4">
            <input id="Address2" name="Address2" v-model="dataModel.address2" type="text" maxlength="250" class="form-control" />
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="form-group col-4">
            <label for="Address3" id="lbl_Address3" class="control-label">Address3 </label>
        </div>
        <div class=" col-4">
            <input id="Address3" name="Address3" v-model="dataModel.address3" type="text" maxlength="250" class="form-control" />
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="form-group col-4">
            <label for="District" id="lbl_District" class="control-label">District</label>
        </div>
        <div class=" col-4">
            <input id="District" name="District" v-model="dataModel.district" type="text" class="form-control" required />
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="form-group form-check col-4">


            <input type="checkbox" id="IsActive" name="IsActive" v-model="dataModel.isActive">
            <label for="checkbox">Active ??</label>


        </div>

        <div class="form-group form-check col-4">

            <input type="checkbox" id="IsRegCompleted" name="IsRegCompleted" v-model="dataModel.isRegCompleted">
            <label for="checkbox">Registration Completed ??</label>



        </div>
    </div>





    <hr />

    <div class="row justify-content-center">

        <div class=" col-sm-12 text-center">

            <input type="submit" v-on:click="checkForm" value="Update" class="btn btn-primary" />
            <a asp-action="Index" class="btn btn-danger btn-md center-block"> Cancel </a>
        </div>

    </div>
    <partial name="/Views/Shared/_AuditView.cshtml" />
</form>


<div>
    <a asp-action="Index" class="BacktoList"> &laquo; Back to List</a>
</div>
@section Scripts {
    <script type="text/javascript">

        var pageMixin = {
            created() {
                this.dataModel = @Json.Serialize(Model);
                //this.GetStateDropDowns();
                //this.GetCircleDropDowns();

                this.GenerateDropDowns('STATE', this.dataModel.stateId)
                this.GenerateDropDowns('CIRCLE', this.dataModel.circleId)
                
            },
            mounted() {
                GetUserFullNames();
            },
            data: {
                dataModel: null,
                errors: [],
                states: [],
                circles: [],
              

                function() {
                    return {
                       appMessage: 'Category',
                    };
                }
            },
            methods: {
                checkForm: function (e) {
                    this.errors = [];
                    if (!this.dataModel.name) {
                        this.errors.push(" Branch Name required.");
                    }
                    if (!this.dataModel.dpCode) {
                        this.errors.push(" Branch DpCode required.");
                    }
                    if (!this.dataModel.circleId) {
                        this.errors.push(" Branch CircleId required.");
                    }
                    if (!this.dataModel.stateId) {
                        this.errors.push(" Branch stateId required.");
                    }
                    if (!this.dataModel.address1) {
                        this.errors.push(" Branch Address required.");
                    }

                    if (!this.dataModel.district) {
                        this.errors.push(" Branch District required.");
                    }
                    if (!this.errors.length) {
                        return true;
                    }
                    e.preventDefault();
                }  ,

                SubmitForm: function (e) {
                    checkForm(e);
                },
                GetStateDropDowns: function () {
                    var bodyFormData = new FormData();
                    bodyFormData.append('listType', 'STATE');
                    axios({
                        method: 'post',
                        url: '/api/data/',
                        data: bodyFormData,
                        headers: { 'Content-Type': 'multipart/form-data' }
                    })
                        .then(function (response) {
                            //handle success
                            this.states = response.data.items;
                            this.SetSelectedstates();
                        }.bind(this))
                        .catch(function (response) {
                            //handle error
                            console.log(response);
                        });
                },

                GetCircleDropDowns: function () {
                    var bodyFormData = new FormData();
                    bodyFormData.append('listType', 'CIRCLE');
                    axios({
                        method: 'post',
                        url: '/api/data/',
                        data: bodyFormData,
                        headers: { 'Content-Type': 'multipart/form-data' }
                    })
                        .then(function (response) {
                            //handle success
                            this.circles = response.data.items;
                            this.SetSelectedcircles();
                        }.bind(this))
                        .catch(function (response) {
                            //handle error
                            console.log(response);
                        });
                },
               
                SetSelectedstates: function () {

                    this.dataModel.stateId = this.states.find(item => item.code == this.dataModel.stateId)

                    this.dataModel.stateId = this.dataModel.stateId.code

                },
                SetSelectedcircles: function () {

                    this.dataModel.circleId = this.circles.find(item => item.code == this.dataModel.circleId)

                    this.dataModel.circleId = this.dataModel.circleId.code

                },
               

            }
        };

        mixinArray.push(pageMixin);
    </script>
}
